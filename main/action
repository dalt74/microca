#!/bin/bash

function fatal() {
    echo 1>&2
    echo "$@" 1>&2
    echo 1>&2
    exit 1
}

LIBRESSL=no
openssl version | grep -q ^LibreSSL && LIBRESSL=yes

if [ "$WORK_DIR" = "" ] ; then WORK_DIR="$(pwd)"; fi

if [ "$1" = "prepare" ] ; then
    if [ -e "$WORK_DIR/.config" -o -e "$WORK_DIR/.openssl.cnf" ] ; then
        fatal "Workspace $WORK_DIR already prepared"
    elif [ ! -d "$WORK_DIR" ] ; then
        fatal "Workspace $WORK_DIR not found"
    fi
    if [ "$BASE_DIR" = "" ] ; then BASE_DIR="$(dirname $0)" ; fi
    if [ "$BASE_DIR" = "" ] ; then BASE_DIR="$(dirname $(which $0))" ; fi
    if [ "$BASE_DIR" = "" ] ; then fatal "Unable to detect base dir" ; fi
    cp "$BASE_DIR/config" "$WORK_DIR/.config" && \
        cp "$BASE_DIR/openssl.cnf" "$WORK_DIR/.openssl.cnf"
    if [ ! -e "$WORK_DIR/.openssl.cnf" ] ; then
        fatal "Initialization failed"
    fi
    echo
    echo Success initialization
    echo
    exit 0
fi

if [ -e "$WORK_DIR/.config" ] ; then
    . "$WORK_DIR/.config"
    export OPENSSL_CONF="$WORK_DIR/.openssl.cnf"
else
    fatal "Workspace $WORK_DIR not prepared"
fi

if [ "$CONF_DIR" = "" ] ; then CONF_DIR=$(pwd); fi
if [ "$REQ_COUNTRY" = "" ] ; then REQ_COUNTRY=$DEFAULT_CONF_COUNTRY; fi
if [ "$REQ_LOCALITY" = "" ] ; then REQ_LOCALITY=$DEFAULT_CONF_LOCALITY; fi
if [ "$REQ_PROVINCE" = "" ] ; then REQ_PROVINCE=$DEFAULT_CONF_PROVINCE; fi
if [ "$REQ_ORG" = "" ] ; then REQ_ORG=$DEFAULT_CONF_ORG; fi
if [ "$REQ_OU" = "" ] ; then REQ_OU=$DEFAULT_CONF_OU; fi
if [ "$REQ_BITS" = "" ] ; then REQ_BITS=$DEFAULT_CONF_BITS; fi
if [ "$REQ_CERT_DAYS" = "" ] ; then REQ_CERT_DAYS=$CONF_CERT_DAYS; fi

export CONF_DIR REQ_CERT_DAYS CONF_CRL_DAYS REQ_COUNTRY REQ_PROVINCE REQ_LOCALITY REQ_ORG REQ_OU REQ_CN REQ_BITS

function _openssl() {
    BASE_OPENSSL_CONF="$OPENSSL_CONF"
    if [ "$LIBRESSL" = "yes" ] ; then
        content="$(cat "$OPENSSL_CONF")"
        for n in CONF_DIR CONF_CRL_DAYS \
                 REQ_CERT_DAYS REQ_COUNTRY REQ_PROVINCE \
                 REQ_LOCALITY REQ_ORG REQ_OU REQ_CN REQ_BITS
        do
            sval='$ENV::'$n
            dval="$(echo ${!n} | tr / ^)"
            content="$(echo "$content" | sed -e "s/$sval/$dval/g")"
        done
        export OPENSSL_CONF=".tmp.pid-$$.openssl.cnf"
        echo "$content" | tr "^" "/" > "$OPENSSL_CONF"
    fi
    if openssl $@ ; then
        [ "$OPENSSL_CONF" != "$BASE_OPENSSL_CONF" ] && rm -f "$OPENSSL_CONF"
        return 0
    else
        [ "$OPENSSL_CONF" != "$BASE_OPENSSL_CONF" ] && rm -f "$OPENSSL_CONF"
        return 1
    fi
}

if [ "$1" = "init" ] ; then
    if [ -e "$CONF_DIR/ca_dir/cacert.pem" -o \
         -e "$CONF_DIR/ca_dir/cacert.pem" -o \
         -e "$CONF_DIR/ca_dir/serial" -o \
         -e "$CONF_DIR/ca_dir/index" \
    ] ; then
        fatal "CA already exists"
    fi
    [ ! -d "$CONF_DIR/ca_dir" ] && mkdir "$CONF_DIR/ca_dir"
    REQ_CN=mcaCAroot
    export REQ_CN
    _openssl req -nodes -new -x509 -days $REQ_CERT_DAYS \
                 -keyout $CONF_DIR/ca_dir/cacert.key \
                 -out $CONF_DIR/ca_dir/cacert.pem && \
        echo 00 > $CONF_DIR/ca_dir/index.txt && \
        echo 'unique_subject = yes' > $CONF_DIR/ca_dir/index.txt.attr
    [ "$OPENSSL_CONF" != "$BASE_OPENSSL_CONF" ] && rm -f "$OPENSSL_CONF"
    [ -f "$CONF_DIR/ca_dir/index.txt.attr" ] || fatal "Operation failed"
    echo
    echo "Initialization success"
    exit 0
elif [ "$1" = "crl" ] ; then
    [ ! -e "$CONF_DIR/ca_dir/index.txt" ] && fatal "Not initialized"
    export REQ_CN=""
    _openssl ca -gencrl -crldays 3650 -out crl.pem
    [ "$OPENSSL_CONF" != "$BASE_OPENSSL_CONF" ] && rm -f "$OPENSSL_CONF"
else
    echo "Usage:"
    echo "$0 prepare  -- prepare CA workspace"
    echo "$0 init     -- initialize CA"
    echo "$0 crl      -- generate CRL"
    fatal "Exiting"
fi
